import argparse

def parse():
    
    parser = argparse.ArgumentParser()
    parser.add_argument("--gpu", default=0, type=int)
    parser.add_argument("--seed", default=0, type=int)
    parser.add_argument("--alp", default=1, type=float, help="step size for inner loop")
    parser.add_argument("--lam", default=1, type=float, help="structure reg")
    parser.add_argument("--lam0", default=0, type=float, help='coefficient for mlp')
    parser.add_argument("--lam_K", default=1, type=float, help='coefficient for negative edge')
    parser.add_argument("--gamma", default=99, type=float, help='gamma for logsigmoid')
    parser.add_argument("--K", default=0, type=int, help="negative sample numbers for each edge")
    parser.add_argument("--nomlp", default=False, action='store_true')
    parser.add_argument("--dataset", default='ogbl-citation2', choices=['ogbl-collab', 'ogbl-ddi', 'ogbl-ppa', 'ogbl-citation2', 'ogbl-vessel'], type=str)
    parser.add_argument("--model", default='yinyang', type=str)
    parser.add_argument("--lr", default=0.01, type=float)
    parser.add_argument("--prop_step", default=8, type=int)
    parser.add_argument("--hidden", default=32, type=int)
    parser.add_argument("--metric", default='hits@k', choices=['hits@k', 'auc', 'ap'], type=str)
    parser.add_argument("--score_func", default='Hadamard', type=str)
    parser.add_argument("--dynamic", default='static', choices=['static', 'dynamic'], type=str)
    parser.add_argument("--debug", default=False, action='store_true')
    parser.add_argument("--batch_size", default=1024, type=int)
    parser.add_argument("--dropout", default=0.05, type=float)
    parser.add_argument("--num_neg", default=1, type=int)
    parser.add_argument("--epochs", default=50, type=int)
    parser.add_argument("--wandb", default=False, action='store_true')
    parser.add_argument("--linear", default=False, action='store_true')
    parser.add_argument("--sign_emb", default=False, action='store_true')
    parser.add_argument("--sign_dropout", default=0.1, type=float)
    parser.add_argument("--sign_k", default=0, type=int)
    parser.add_argument("--train_results", default=False, action='store_true')
    parser.add_argument("--loss_func", default='bce', type=str)
    parser.add_argument("--filter_year", default=2007, type=int) 
    parser.add_argument("--interval", default=50, type=int)
    parser.add_argument("--step_lr_decay", action='store_true', default=False)
    parser.add_argument("--exp_lr_decay", action='store_true', default=False)
    parser.add_argument("--update_epoch", default=200, type=int)
    parser.add_argument("--use_distance_feature", action='store_true', default=False)
    parser.add_argument("--as_encoder_input", action='store_true', default=False)
    parser.add_argument("--as_decoder_input", action='store_true', default=False)
    parser.add_argument("--contain_valid_edge", action='store_true', default=False)
    parser.add_argument("--train_valid_edge", action='store_true', default=False)
    parser.add_argument("--collab_step", default=50, type=int)
    parser.add_argument("--loss_negtype", default='global', type=str)
    parser.add_argument("--split_negs", default=False, action='store_true')
    parser.add_argument("--uniform", default=False, action='store_true')
    parser.add_argument("--c1", default=1, type=int)
    parser.add_argument("--c2", default=1, type=int)
    parser.add_argument("--c3", default=1, type=int)
    parser.add_argument("--c4", default=1, type=int)
    parser.add_argument("--c5", default=0, type=int)
    parser.add_argument("--sigma", default=1, type=float)
    args = parser.parse_args()
    args.mlp = not args.nomlp
    return args